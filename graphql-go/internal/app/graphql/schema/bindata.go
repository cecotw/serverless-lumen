// Package schema Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
// ../todo/todo.graphql
package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _SchemaSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xce\x48\xcd\x4d\x54\xa8\xe6\x52\x50\x28\x2c\x4d\x2d\xaa\xb4\x52\x08\x04\x51\x3a\x5c\x0a\x0a\xb9\xa5\x25\x89\x25\x99\xf9\x79\x56\x0a\xbe\x50\x16\x57\x2d\x57\x49\x65\x41\x2a\x44\x89\x42\x35\x94\x07\x93\x55\xa8\xae\x05\x04\x00\x00\xff\xff\xff\x7f\xdd\xf8\x4e\x00\x00\x00")

func SchemaSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_SchemaSchemaGraphql,
		"../schema/schema.graphql",
	)
}

func SchemaSchemaGraphql() (*asset, error) {
	bytes, err := SchemaSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../schema/schema.graphql", size: 78, mode: os.FileMode(420), modTime: time.Unix(1569988040, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _TodoTodoGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xce\xb1\x6a\xc3\x30\x10\x06\xe0\xfd\x9e\xe2\x17\x5e\xda\x57\xd0\xd8\x76\xf1\xd0\xa1\xd4\x5b\xe9\x20\xa2\xc3\x18\x6c\x9d\xb0\x4e\x10\x13\xfc\xee\x41\x8a\x93\x38\x24\x9b\xee\x74\xf7\xdd\xcf\x47\xe5\xe0\xa1\x4b\x64\xfc\x64\x9e\x17\x9c\x08\x50\xf1\xf2\x36\x78\x8b\xf6\xcb\xbc\x5b\x74\xe2\x65\xeb\x26\x8b\xbf\x52\xfe\xd3\x4a\xb4\x5f\xfe\xce\xea\x74\x90\x50\xf7\x0f\x33\x3b\xe5\xae\x2a\x21\x66\xbd\x10\x6d\x79\x5e\x3d\x43\x40\x83\x1c\xfd\x36\x78\xbb\xd2\xc0\xf3\xc8\x0f\xcd\x95\xa8\xde\x28\x45\xf5\xb7\x68\x04\x4c\x9c\x92\xeb\xd9\xe2\x57\xe7\x21\xf4\xe5\x2f\x7d\xca\x14\x8b\x60\xf1\x21\x32\xb2\x0b\x05\xa8\x39\xee\x31\x76\xcc\xb3\x62\x5e\x33\x86\xd6\x73\x00\x00\x00\xff\xff\xb1\x11\x8e\x76\x2f\x01\x00\x00")

func TodoTodoGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_TodoTodoGraphql,
		"../todo/todo.graphql",
	)
}

func TodoTodoGraphql() (*asset, error) {
	bytes, err := TodoTodoGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../todo/todo.graphql", size: 303, mode: os.FileMode(420), modTime: time.Unix(1569991283, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../schema/schema.graphql": SchemaSchemaGraphql,
	"../todo/todo.graphql":     TodoTodoGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"schema": &bintree{nil, map[string]*bintree{
			"schema.graphql": &bintree{SchemaSchemaGraphql, map[string]*bintree{}},
		}},
		"todo": &bintree{nil, map[string]*bintree{
			"todo.graphql": &bintree{TodoTodoGraphql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
